import OpenAI from "openai"

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ success: false, error: "Method not allowed" })
  }

  try {
    const { id, topic, description, participant1, participant2 } = req.body

    // Generate a script for the debate using OpenAI
    const prompt = `
      Create a debate script between ${participant1} and ${participant2} on the topic of "${topic}".
      
      Context: ${description}
      
      Format the debate as a back-and-forth conversation with 3-4 exchanges from each participant.
      Each participant should present their perspective based on their historical views, expertise, and character.
      Keep each response concise (2-3 sentences per turn).
    `

    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [
        { role: "system", content: "You are a debate script writer." },
        { role: "user", content: prompt },
      ],
    })

    const script = completion.choices[0].message.content

    // Generate audio from the script using Text-to-Speech
    const speechResponse = await openai.audio.speech.create({
      model: "tts-1",
      voice: "alloy",
      input: script || "This is a placeholder for the debate audio.",
    })

    // Convert the audio to a base64 string
    const buffer = Buffer.from(await speechResponse.arrayBuffer())
    const base64Audio = buffer.toString("base64")

    // Create a data URL for the audio
    const audioUrl = `data:audio/mp3;base64,${base64Audio}`

    return res.status(200).json({
      success: true,
      audioUrl,
    })
  } catch (error) {
    console.error("Error generating debate audio:", error)
    return res.status(500).json({
      success: false,
      error: "Failed to generate audio",
    })
  }
}